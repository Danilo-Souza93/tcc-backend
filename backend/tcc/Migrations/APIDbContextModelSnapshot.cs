// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using tcc.Context;

#nullable disable

namespace tcc.Migrations
{
    [DbContext(typeof(APIDbContext))]
    partial class APIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("tcc.EntityModels.ProdutoEntityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("produto_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dt_creation");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dt_modified");

                    b.Property<string>("Detalhe")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("detalhe");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<int>("QuantidadeEstoque")
                        .HasColumnType("integer")
                        .HasColumnName("quantidade");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric")
                        .HasColumnName("valor");

                    b.Property<string>("dt_lote")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("dt_lote");

                    b.HasKey("Id");

                    b.ToTable("produtos", (string)null);
                });

            modelBuilder.Entity("tcc.EntityModels.VendaEntityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("venda_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dt_creation");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dt_modified");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<float>("ValorTotal")
                        .HasColumnType("real")
                        .HasColumnName("valor_total");

                    b.HasKey("Id")
                        .HasName("pk_venda_id");

                    b.ToTable("vendas", (string)null);
                });

            modelBuilder.Entity("tcc.Models.Cartao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bandeira")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CodigoSeguranca")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DtValidade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NomeCartao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NumeroCartao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cartao");
                });

            modelBuilder.Entity("tcc.Models.ProdutoModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Detalhe")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuantidadeEstoque")
                        .HasColumnType("integer");

                    b.Property<float>("Valor")
                        .HasColumnType("real");

                    b.Property<string>("dt_lote")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProdutoModel");
                });

            modelBuilder.Entity("tcc.EntityModels.VendaEntityModel", b =>
                {
                    b.OwnsOne("tcc.Models.DadosPagamentoModel", "DadosPagamento", b1 =>
                        {
                            b1.Property<int>("VendaEntityModelId")
                                .HasColumnType("integer");

                            b1.Property<int>("CreditoId")
                                .HasColumnType("integer");

                            b1.Property<int>("DadosPagamentoId")
                                .HasColumnType("integer")
                                .HasColumnName("pagamentoId");

                            b1.Property<int>("DebitoId")
                                .HasColumnType("integer");

                            b1.HasKey("VendaEntityModelId");

                            b1.HasIndex("CreditoId");

                            b1.HasIndex("DebitoId");

                            b1.ToTable("vendas");

                            b1.HasOne("tcc.Models.Cartao", "Credito")
                                .WithMany()
                                .HasForeignKey("CreditoId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.HasOne("tcc.Models.Cartao", "Debito")
                                .WithMany()
                                .HasForeignKey("DebitoId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("VendaEntityModelId");

                            b1.Navigation("Credito");

                            b1.Navigation("Debito");
                        });

                    b.OwnsOne("tcc.Models.DadosPessoaisModel", "DadosPessoais", b1 =>
                        {
                            b1.Property<int>("VendaEntityModelId")
                                .HasColumnType("integer");

                            b1.Property<string>("Cpf")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("character varying(11)")
                                .HasColumnName("cpf");

                            b1.Property<string>("Nome")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Sobrenome")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("VendaEntityModelId");

                            b1.ToTable("vendas");

                            b1.WithOwner()
                                .HasForeignKey("VendaEntityModelId");
                        });

                    b.OwnsOne("tcc.Models.EnderecoModel", "Endereco", b1 =>
                        {
                            b1.Property<int>("VendaEntityModelId")
                                .HasColumnType("integer");

                            b1.Property<string>("Bairro")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Cep")
                                .HasColumnType("integer")
                                .HasColumnName("endereco_cep");

                            b1.Property<string>("Cidade")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("EnderecoId")
                                .HasColumnType("integer")
                                .HasColumnName("endereco_id");

                            b1.Property<string>("Estado")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Numero")
                                .HasColumnType("integer")
                                .HasColumnName("endereco_num");

                            b1.Property<string>("Rua")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("VendaEntityModelId");

                            b1.ToTable("vendas");

                            b1.WithOwner()
                                .HasForeignKey("VendaEntityModelId");
                        });

                    b.Navigation("DadosPagamento")
                        .IsRequired();

                    b.Navigation("DadosPessoais")
                        .IsRequired();

                    b.Navigation("Endereco")
                        .IsRequired();
                });

            modelBuilder.Entity("tcc.Models.ProdutoModel", b =>
                {
                    b.HasOne("tcc.EntityModels.VendaEntityModel", null)
                        .WithMany("Produto")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("tcc.EntityModels.VendaEntityModel", b =>
                {
                    b.Navigation("Produto");
                });
#pragma warning restore 612, 618
        }
    }
}
