// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using tcc.Context;

#nullable disable

namespace tcc.Migrations
{
    [DbContext(typeof(APIDbContext))]
    [Migration("20240524000358_remocao-dados-pagamento")]
    partial class remocaodadospagamento
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("tcc.EntityModels.ProdutoEntityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("produto_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dt_creation");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dt_modified");

                    b.Property<string>("Detalhe")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("detalhe");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<int>("QuantidadeEstoque")
                        .HasColumnType("integer")
                        .HasColumnName("quantidade");

                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("produto_guid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<float>("Valor")
                        .HasColumnType("real")
                        .HasColumnName("valor");

                    b.Property<string>("dt_lote")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("dt_lote");

                    b.HasKey("Id");

                    b.ToTable("produtos", (string)null);
                });

            modelBuilder.Entity("tcc.EntityModels.VendaEntityModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dt_creation");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dt_modified");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("StatusPagamento")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("status_pagamento");

                    b.Property<float>("ValorTotal")
                        .HasColumnType("real")
                        .HasColumnName("valor_total");

                    b.Property<Guid>("VendaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("venda_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.HasKey("Id");

                    b.ToTable("vendas", (string)null);
                });

            modelBuilder.Entity("tcc.EntityModels.VendaProdutosEntityModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dt_creation");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dt_modified");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("integer")
                        .HasColumnName("produto_id");

                    b.Property<int>("Quantidade")
                        .HasColumnType("integer")
                        .HasColumnName("venda_produto_quantidade");

                    b.Property<Guid>("VendaId")
                        .HasColumnType("uuid")
                        .HasColumnName("venda_id");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoId");

                    b.HasIndex("VendaId");

                    b.ToTable("venda_produto", (string)null);
                });

            modelBuilder.Entity("tcc.EntityModels.VendaEntityModel", b =>
                {
                    b.OwnsOne("tcc.Models.DadosPessoaisModel", "DadosPessoais", b1 =>
                        {
                            b1.Property<Guid>("VendaEntityModelId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Cpf")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("character varying(11)")
                                .HasColumnName("pessoal_cpf");

                            b1.Property<string>("Nome")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("pessoal_nome");

                            b1.Property<string>("Sobrenome")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("pessoal_sobrenome");

                            b1.HasKey("VendaEntityModelId");

                            b1.ToTable("vendas");

                            b1.WithOwner()
                                .HasForeignKey("VendaEntityModelId");
                        });

                    b.OwnsOne("tcc.Models.EnderecoModel", "Endereco", b1 =>
                        {
                            b1.Property<Guid>("VendaEntityModelId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Bairro")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("endereco_bairro");

                            b1.Property<string>("Cep")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("endereco_cep");

                            b1.Property<string>("Cidade")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("endereco_cidade");

                            b1.Property<string>("Estado")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("endereco_estado");

                            b1.Property<int>("Numero")
                                .HasColumnType("integer")
                                .HasColumnName("endereco_numero");

                            b1.Property<string>("Rua")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("endereco_rua");

                            b1.HasKey("VendaEntityModelId");

                            b1.ToTable("vendas");

                            b1.WithOwner()
                                .HasForeignKey("VendaEntityModelId");
                        });

                    b.Navigation("DadosPessoais")
                        .IsRequired();

                    b.Navigation("Endereco")
                        .IsRequired();
                });

            modelBuilder.Entity("tcc.EntityModels.VendaProdutosEntityModel", b =>
                {
                    b.HasOne("tcc.EntityModels.ProdutoEntityModel", "Produto")
                        .WithMany("ProdutoVendas")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tcc.EntityModels.VendaEntityModel", "Venda")
                        .WithMany("VendaProdutos")
                        .HasForeignKey("VendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");

                    b.Navigation("Venda");
                });

            modelBuilder.Entity("tcc.EntityModels.ProdutoEntityModel", b =>
                {
                    b.Navigation("ProdutoVendas");
                });

            modelBuilder.Entity("tcc.EntityModels.VendaEntityModel", b =>
                {
                    b.Navigation("VendaProdutos");
                });
#pragma warning restore 612, 618
        }
    }
}
